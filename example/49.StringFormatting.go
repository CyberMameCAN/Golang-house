package main

import (
	"fmt"
	"os"
)

// 伝統的な printf によく似た、良く出来た文字列フォーマット機能が Go にはある。
// ここでは、文字列をフォーマットする例をいくつか紹介する。

type point struct {
	x, y int
}

func main() {
	// 一般的な Go の値をフォーマットする、verb と呼ばれるフォーマット文字列がある。
	// ここでは、point 構造体のインスタンスを表示している。
	p := point{1, 2}
	fmt.Printf("%v\n", p)
	// 構造体をフォーマットするとき、%+v を使えば構造体のフィールド名をフォーマット結果に含められる。
	fmt.Printf("%+v\n", p)
	// %#v と書くと、Go の文法でその値を表す文字列が得られる。
	// これは、その値を生成するコードが得られるということだ。
	fmt.Printf("%#v\n", p)
	// %T でその値の方を表示できる。
	fmt.Printf("%T\n", p)
	// 真偽値も表示できる。
	fmt.Printf("%t\n", true)
	// 整数値を表示する際のオプションが色々ある。 普通に10進記数法で表示するには %d を使う。
	fmt.Printf("%d\n", 123)
	// 2進記数法
	fmt.Printf("%b\n", 14)
	// 整数に対応する文字を表示
	fmt.Printf("%c\n", 33)
	// 16進記数法
	fmt.Printf("%x\n", 456)
	// 実数をフォーマットする際のオプションも色々ある。
	// %f を使うと標準的な10進記数法でフォーマットする。
	fmt.Printf("%f\n", 78.9)
	// %e か %E を使うと科学で使う記法でフォーマットする（形式が少し違う）
	fmt.Printf("%e\n", 123400000.0)
	fmt.Printf("%E\n", 123400000.0)
	// 文字列を普通に表示するには %s を使う
	fmt.Printf("%s\n", "\"string\"")
	// Go のソースコードのようにダブルクオートを文字列に入れるには、%q を使う。
	fmt.Printf("%q\n", "\"string\"")
	// 整数をフォーマットするときに見たように、
	// %x を使うと文字列を16進記数法でフォーマットする。
	// この場合、出力2文字が入力1バイトを表す。
	fmt.Printf("%x\n", "hex this")
	// ポインタを表示するときは、%p を使う。
	fmt.Printf("%p\n", &p)
	// 数をフォーマットするとき、結果の幅や精度を制御したいことがよくある。
	// 幅を指定するには % の直後に数を書けばよい。
	// デフォルトでは結果は右詰めで、空きはスペースで埋められる。
	fmt.Printf("|%6d|%6d|\n", 12, 345)
	// 実数の表示幅も指定できるが、実数の場合は普通幅だけでなく、精度も同時に指定する。
	fmt.Printf("|%6.2f|%6.2f|\n", 1.2, 3.45)
	// 左詰めにしたければ、フラグ - を使う。
	fmt.Printf("|-%6.2f|%-6.2f|\n", 1.2, 3.45)
	// 表を作るときなどは、文字列の幅を制御したいこともあるだろう。
	// 右詰めで幅を指定するには以下のようにする。
	fmt.Printf("|%6s|%6s|\n", "foo", "b")
	// 左詰めにするには、フラグ-を使う。
	fmt.Printf("|%-6s|%-6s|\n", "foo", "b")
	// ここまでフォーマットした文字列を os.Stdout に出力する Printf を見てきたが、
	// Sprintf を使えばフォーマット結果の文字列を表示することなく、単に返すことができる。
	s := fmt.Sprintf("a %s", "string")
	fmt.Println(s)
	// Fprintf を使えば、os.Stdout 以外の io.Writers に対してフォーマットした文字を書き出せる。
	fmt.Fprintf(os.Stderr, "an %s\n", "error")

}
